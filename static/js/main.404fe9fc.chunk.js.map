{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","state","subscriberList","allCheckboxesSelected","downloadHidden","downloadDisabled","displayInputError","subscriptions","JSON","parse","forEach","channel","subscriberChannel","channelId","id","title","snippet","xmlURL","resourceId","url","thumbnail","thumbnails","default","selected","push","file","temp","split","shift","row","data","element","document","createElement","contents","this","filter","map","Blob","type","href","URL","createObjectURL","download","body","appendChild","click","event","target","files","reader","FileReader","readAsText","onload","filetype","name","readCSVFile","result","readJSONFile","setState","toggleHidden","checked","tempSubscriberList","checkDownloadAvailable","value","tempChannel","findIndex","disabled","length","className","style","display","accept","multiple","onChange","uploadFile","bind","toggleAllCheckboxes","htmlFor","toggleCheckBox","src","alt","width","height","onClick","createOPMLFile","border","React","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.404fe9fc.chunk.js","sourcesContent":["import './App.css';\nimport React from 'react';\n\nexport default class App extends React.Component {\n    constructor(){\n        super()\n        this.state = {\n            subscriberList: [],\n            allCheckboxesSelected: true,\n            downloadHidden: true,\n            downloadDisabled: false,\n            displayInputError: false\n        }\n    }\n\n    readJSONFile(subscriptions) {\n      // reads subscriptions JSON, extracts needed information of each channel and returns a list of them\n      subscriptions = JSON.parse(subscriptions)\n      const subscriberList =[];\n      subscriptions.forEach((channel)=>{\n        let channelId = channel.id //unique identifier  \n        let title = channel.snippet.title // channel title \n        let xmlURL = \"https://www.youtube.com/feeds/videos.xml?channel_id=\"+channel.snippet.resourceId.channelId //rss feed url\n        let url = \"https://www.youtube.com/channel/\"+channel.snippet.resourceId.channelId // channel url\n        let thumbnail = channel.snippet.thumbnails.default.url //channel thumbnail \n        let selected = true //for use of user filtering of channels \n        const subscriberChannel = {channelId:channelId,title:title,xmlURL:xmlURL,url:url,thumbnail:thumbnail,selected:selected}\n        subscriberList.push(subscriberChannel)\n      })\n      return subscriberList\n\n    }\n\n    readCSVFile(file){\n      const subscriberList =[];\n      let temp = file.split('\\n')\n      temp.shift(); // remove label \n      temp.forEach((row)=>{\n        if(row){\n          let data = row.split(',')\n          let channelId = data[0] //unique identifier  \n          let url = data[1]\n          let title = data[2] // channel title \n          let xmlURL = \"https://www.youtube.com/feeds/videos.xml?channel_id=\"+channelId\n          let selected = true //for use of user filtering of channels \n\n          const subscriberChannel = {channelId:channelId,title:title,xmlURL:xmlURL,url:url,selected:selected}\n\n          subscriberList.push(subscriberChannel)\n          }\n        \n\n      })\n      return subscriberList\n\n    }\n\n    createOPMLFile(){\n      //creates OPML file with all channels that have been selected and lets user download it\n      const element = document.createElement(\"a\");\n      var contents = \"<?xml version='2.0' encoding='UTF-8' standalone='yes' ?>\\n<opml version= \\\"2.0 \\\">\\n<head>\\n  <title>Subscriptions2Rss</title>\\n</head>\\n<body>\\n <outline text=\\\"Youtube Subscriptions\\\">\\n\"\n      \n      var exportSubscriberList = this.state.subscriberList.filter(function(channel){\n                  return channel.selected !== false\n      })\n      exportSubscriberList.map(channel => ( \n        contents = contents +\n         \"   <outline title=\\\"\"+channel.title+\"\\\" type=\\\"rss\\\" xmlUrl=\\\"\"+channel.xmlURL+\"\\\" htmlUrl=\\\"\"+channel.url+\"\\\"/>\\n\"\n      ));\n    \n      contents = contents + \"</outline>\\n</body>\\n</opml>\"\n      const file = new Blob([contents], {type: 'text/plain'});\n      element.href = URL.createObjectURL(file);\n      element.download = \"subscriptions.opml\";\n      document.body.appendChild(element); // Required for this to work in FireFox\n      element.click();\n    }\n\n    uploadFile(event){\n      //gets file sees filetype and parses data into subscriberList state\n      let file = event.target.files[0];\n      let reader = new FileReader();\n      reader.readAsText(file);\n      reader.onload = () => {\n          try{\n            let filetype = file.name.split('.')[1]\n            let subscriberList = []\n            if(filetype === 'csv'){\n              subscriberList=this.readCSVFile(reader.result)\n            }else if(filetype === 'json'){\n              subscriberList=this.readJSONFile(reader.result)\n            }\n            this.setState({\n              subscriberList: subscriberList\n            })\n            this.toggleHidden();\n          }catch{ // should hopefully handle any file issues (empty, different format etc)\n            this.setState({\n              displayInputError :true\n              })\n          }\n      }   \n    }\n\n    toggleHidden(){\n        //toggle if hidden or not\n        this.setState({\n            downloadHidden: !this.state.downloadHidden\n        })\n    }\n\n    toggleAllCheckboxes(event){\n        //changes the selected variable for all channels based on if checked or not checked\n        const target = event.target;\n        var checked =false\n        if(target.checked){\n            checked =true\n        }\n        var tempSubscriberList = this.state.subscriberList\n        tempSubscriberList.forEach(channel => ( \n            channel.selected = checked\n        ))\n        this.setState({\n            allCheckboxesSelected: !this.state.allCheckboxesSelected,\n            subscriberList: tempSubscriberList\n        })\n        this.checkDownloadAvailable()\n    }\n\n    toggleCheckBox(event){\n        //gets the channel from the list by the id and negates the selected variable \n        const target = event.target;\n        var id = target.value;\n        const tempChannel = this.state.subscriberList.findIndex((channel)=>channel.channelId === id)\n        var tempSubscriberList = this.state.subscriberList\n        tempSubscriberList[tempChannel].selected =!tempSubscriberList[tempChannel].selected\n        this.setState({\n          subscriberList: tempSubscriberList\n      })\n        this.checkDownloadAvailable()      \n    }\n\n    checkDownloadAvailable(){\n      //check that at least one channel selected else will disable download button\n      var tempSubscriberList = this.state.subscriberList.filter(function(channel){\n        return channel.selected === true\n      })\n      var disabled = false\n      if (tempSubscriberList.length === 0){\n        disabled = true\n      }\n      this.setState({\n        downloadDisabled: disabled\n    })\n    }\n\n    render () {\n      return (\n         <div>\n            <h2 className=\"center\">Youtube2RSS</h2>\n            <upload-block style={{display: this.state.downloadHidden ? 'inline' : 'none' }}>\n                  <input className=\"center\" type=\"file\" id=\"subscriptionFile\" accept=\".json, .csv\"multiple={false} onChange={this.uploadFile.bind(this)}></input>\n                  <error-text style={{display: this.state.displayInputError ? 'block' : 'none' }}>Invalid File</error-text>\n                  <h3 className=\"center\">Upload your subscriptions json or csv file acquired from <a href=\"https://takeout.google.com/\">Google Takeout</a></h3>\n                  <h3 className=\"center\">(Everything is done locally in your browser)</h3>\n            </upload-block>\n\n            <div style={{display: this.state.downloadHidden ? 'none' : 'inline' }} >\n                <channel-box>\n                  <h4 className=\"center\">Your Subscriptions</h4>\n                  <channel-card>\n                      <input className=\"checkboxColumn\" id=\"selectAll\" type=\"checkbox\" checked={this.state.allCheckboxesSelected} onChange={this.toggleAllCheckboxes.bind(this)}/>\n                      <label htmlFor=\"selectAll\"> Select All</label> \n                      {/* <channel-title>Select All</channel-title> */}\n                </channel-card>\n                  {this.state.subscriberList.map(channel => (\n                    <channel-card>\n                      <input className=\"checkboxColumn\" type=\"checkbox\" checked={channel.selected} value={channel.channelId} onChange={this.toggleCheckBox.bind(this)}></input>\n                      <img className=\"channelThumbnail\" src ={channel.thumbnail} alt={channel.title}  width=\"50\" height=\"50\" ></img>\n                      <channel-title><a href={channel.url}>{channel.title}</a></channel-title>\n                    </channel-card>\n                  ))}        \n                </channel-box>\n                <p className=\"center\">Download this OPML file to import your subscriptions into your preferred RSS or Podcast Client</p>\n                <button className=\"center\" disabled = {this.state.downloadDisabled} onClick={this.createOPMLFile.bind(this)}>Download</button>\n                </div>  \n\n            {/* shilling donation button :) */}\n            <br></br>\n            <a className=\"center\" href='https://ko-fi.com/A0A8581I4' target='blank'><img height='36' style={{border:'0px',height:'36px'}} src='https://cdn.ko-fi.com/cdn/kofi2.png?v=2' border='0' alt='Buy Me a Coffee at ko-fi.com' /></a>              \n            <br></br>   \n          </div>  \n       )\n    }\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}